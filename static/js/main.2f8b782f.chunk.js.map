{"version":3,"sources":["components/Filter/Filter.module.css","redux/actions.js","redux/selectors.js","components/Contacts/ContactList.js","components/Filter/Filter.js","components/ContactForm/ContactForm.js","App.js","redux/reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css","components/Contacts/ContactList.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","changeFilter","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","contact","toLowerCase","includes","ContactList","useSelector","dispatch","useDispatch","className","styles","list","map","item","text","btn","onClick","actions","Filter","wrapper","type","value","onChange","e","target","ContactForm","onAdd","prodIdName","uuid","prodIdNumber","useState","setContact","setName","setNumber","handleChange","resetForm","form","onSubmit","preventDefault","find","alert","console","log","htmlFor","placeholder","pattern","title","required","submit","App","container","createReducer","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","persistReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.2f8b782f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Filter_wrapper__IqOjQ\"};","import { v4 as uuidv4 } from 'uuid';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('contacts/add', (name, number) => ({\n  payload: {\n    name,\n    number,\n    id: uuidv4(),\n  },\n}));\nconst deleteContact = createAction('contacts/delete');\nconst changeFilter = createAction('contacts/changeFilter');\n\nexport default { addContact, deleteContact, changeFilter };\n\n//=====REDUX=====\n// const deleteContact = id => ({\n//   type: types.DELETE,\n//   payload: id,\n// });\n\n// const changeFilter = contacts => ({\n//   type: types.CHANGE_FILTER,\n//   payload: contacts,\n// });\n\n// const addContact = (name, number) => ({\n//   type: types.ADD,\n//   payload: {\n//     name,\n//     number,\n//     id: uuidv4(),\n//   },\n// });\n","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\n  );\n};\n","import React from 'react';\nimport styles from './ContactList.module.css';\nimport PropTypes from 'prop-types';\nimport { connect, useSelector, useDispatch } from 'react-redux';\nimport actions from '../../redux/actions';\nimport { getVisibleContacts } from '../../redux/selectors';\n\nconst ContactList = () => {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  const deleteContact = id => dispatch(actions.deleteContact(id));\n  return (\n    <ul className={styles.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={styles.item}>\n          <p className={styles.text}>\n            {name} : {number}\n          </p>\n          <button className={styles.btn} onClick={() => deleteContact(id)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.any.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onClick: PropTypes.func.isRequired,\n};\n\n// const visibleContacts = (contacts, filter) => {\n//   return contacts.filter(contact =>\n//     contact.name.toLowerCase().includes(filter.toLowerCase()),\n//   );\n// };\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\n//   contacts: visibleContacts(items, filter),\n// });\n// const mapDispatchToProps = dispatch => ({\n//   deleteContact: id => dispatch(actions.deleteContact(id)),\n// });\n\n//export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\nexport default ContactList;\n","import React from 'react';\nimport styles from './Filter.module.css';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport actions from '../../redux/actions';\nimport { getFilter } from '../../redux/selectors';\n\nconst Filter = () => {\n  const contacts = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <div className={styles.wrapper}>\n      <label>\n        Find contacts by name\n        <input\n          type=\"text\"\n          value={contacts}\n          onChange={e => dispatch(actions.changeFilter(e.target.value))}\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  contacts: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\n// const mapStateToProps = state => ({\n//   contacts: state.contacts.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: e => dispatch(actions.changeFilter(e.target.value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\nexport default Filter;\n","import { useState } from 'react';\nimport { connect, useSelector, useDispatch } from 'react-redux';\nimport { v4 as uuid } from 'uuid';\nimport styles from './ContactForm.module.css';\nimport actions from '../../redux/actions';\nimport { getContacts } from '../../redux/selectors';\n\nconst ContactForm = ({ onAdd }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const prodIdName = uuid();\n  const prodIdNumber = uuid();\n\n  const [contact, setContact] = useState(null);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    // const contact = {\n    //   name,\n    //   number,\n    //   id: uuid(),\n    // };\n    // addNewContact(contact);\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      alert(`${name} contact is already on your list`);\n    } else dispatch(actions.addContact(name, number));\n\n    setContact(contact);\n    resetForm();\n    // onAdd(name, number);\n    console.log('ADD ACTIONS', onAdd);\n  };\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label htmlFor={prodIdName}>Name</label>\n      <input\n        id={prodIdName}\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        placeholder=\"enter name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        onChange={handleChange}\n      />\n      <br />\n      <label htmlFor={prodIdNumber}>Number</label>\n      <input\n        id={prodIdNumber}\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        placeholder=\"enter phone number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n        onChange={handleChange}\n      />\n      <button type=\"submit\" className={styles.submit}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n\n// const mapStateToProps = state => {\n//   return {\n//     contactList: state.items,\n//   };\n// };\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     onAdd: (name, number) => dispatch(actions.addContact(name, number)),\n//   };\n// };\n\n// export default connect(null, mapDispatchToProps)(ContactForm);\nexport default ContactForm;\n","import { useState, useEffect } from 'react';\nimport ContactList from './components/Contacts/ContactList';\nimport Filter from './components/Filter/Filter';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport styles from './components/ContactForm/ContactForm.module.css';\nimport contactsArray from './components/contacts.json';\n\nexport default function App() {\n  // const useLS = contactsArray => {\n  //   const [contacts, setContacts] = useState(\n  //     () =>\n  //       JSON.parse(window.localStorage.getItem('contacts')) ?? contactsArray,\n  //   );\n  //   useEffect(() => {\n  //     localStorage.setItem('contacts', JSON.stringify(contacts));\n  //   }, [contacts]);\n  //   return [contacts, setContacts];\n  // };\n\n  // const [contacts, setContacts] = useLS(contactsArray);\n  // const [filter, setFilter] = useState('');\n\n  // const addNewContact = obj => {\n  //   if (\n  //     contacts.find(\n  //       contact => contact.name.toLowerCase() === obj.name.toLowerCase(),\n  //     )\n  //   ) {\n  //     alert(`${obj.name} is already in contacts`);\n  //   } else setContacts(prev => [...prev, obj]);\n  // };\n  // const deleteContact = contactId => {\n  //   setContacts(contacts.filter(contact => contact.id !== contactId));\n  // };\n  // const onChangeFilter = e => {\n  //   setFilter(e.currentTarget.value);\n  // };\n  // const visibleContacts = () => {\n  //   return contacts.filter(contact =>\n  //     contact.name.toLowerCase().includes(filter.toLowerCase()),\n  //   );\n  // };\n  return (\n    <div className={styles.container}>\n      <h1 className={styles.title}>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n\n      <Filter />\n\n      <ContactList />\n    </div>\n  );\n}\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './actions';\n\nconst initState = [\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n];\n\nconst items = createReducer(initState, {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(contact => contact.id !== payload),\n});\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n\n///////=======REDUX=========\n// const items = (state = initState, { type, payload }) => {\n//   switch (type) {\n//     case types.ADD:\n//       return [...state, payload];\n\n//     case types.DELETE:\n//       return state.filter(contact => contact.id !== payload);\n\n//     default:\n//       return state;\n//   }\n// };\n\n//const filter = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case 'contacts/changeFilter':\n//       return payload;\n\n//     default:\n//       return state;\n//   }\n// };\n","import {\n  configureStore,\n  combineReducers,\n  getDefaultMiddleware,\n} from '@reduxjs/toolkit';\nimport reducer from './reducer';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n\nconst store = configureStore({\n  reducer: { contacts: persistReducer(contactsPersistConfig, reducer) },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactForm_container__1INJV\",\"form\":\"ContactForm_form__1fuOn\",\"submit\":\"ContactForm_submit__ChZTI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__lk0Rm\",\"text\":\"ContactList_text__MyT-R\",\"btn\":\"ContactList_btn__2de-X\"};"],"sourceRoot":""}